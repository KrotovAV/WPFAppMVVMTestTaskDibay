// <auto-generated />
using System;
using DataBaseLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240419032026_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataBaseLayer.Entityes.Abonent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StreetId");

                    b.ToTable("Abonents");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartNum")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbonentId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TypePhone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbonentId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Abonent", b =>
                {
                    b.HasOne("DataBaseLayer.Entityes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DataBaseLayer.Entityes.Street", "Street")
                        .WithMany("Abonents")
                        .HasForeignKey("StreetId");

                    b.Navigation("Address");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Address", b =>
                {
                    b.HasOne("DataBaseLayer.Entityes.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Phone", b =>
                {
                    b.HasOne("DataBaseLayer.Entityes.Abonent", "Abonent")
                        .WithMany("Phones")
                        .HasForeignKey("AbonentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Abonent");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Abonent", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("DataBaseLayer.Entityes.Street", b =>
                {
                    b.Navigation("Abonents");

                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
